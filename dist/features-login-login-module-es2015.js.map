{"version":3,"sources":["./src/app/features/forget-password/forget-password.component.ts","./src/app/features/forget-password/forget-password.component.scss","./src/app/features/inscription/inscription.component.ts","./src/app/features/inscription/inscription.component.html","./src/app/features/login/login.component.scss","./src/app/features/inscription/inscription.component.scss","./src/app/features/login/login.component.html","./src/app/features/forget-password/forget-password.component.html","./src/app/theme/utils/app-validators.ts","./node_modules/angularx-social-login/__ivy_ngcc__/fesm2015/angularx-social-login.js","./src/app/features/forget-password/forget-password.service.ts","./src/app/features/login/login.module.ts","./src/app/features/login/login.component.ts"],"names":[],"mappings":"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AI,EAAC,CAAC;KAC/B;AACL,CAAC;AAEM,SAAS,iBAAiB,CAAC,WAAmB,EAAE,uBAA+B;IAClF,OAAO,CAAC,KAAgB,EAAE,EAAE;QACxB,IAAI,QAAQ,GAAE,KAAK,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;QAC1C,IAAI,oBAAoB,GAAE,KAAK,CAAC,QAAQ,CAAC,uBAAuB,CAAC,CAAC;QAClE,IAAI,QAAQ,CAAC,KAAK,KAAK,oBAAoB,CAAC,KAAK,EAAE;YAC/C,OAAO,oBAAoB,CAAC,SAAS,CAAC,EAAC,mBAAmB,EAAE,IAAI,EAAC,CAAC;SACrE;IACL,CAAC;AACL,CAAC;;;;;;;;;;;;;ACjBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiF;AAC9B;AACJ;;AAEP;AACxC;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,yCAAyC,iBAAiB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mFAAmF,sBAAsB,2BAA2B;AACpI;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,gCAAgC;AAC9F;AACA,SAAS;AACT;AACA;AACA,sDAAsD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,kDAAa;AAC3C;AACA;AACA,8BAA8B,iDAAY;AAC1C;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,0BAA0B;AACzC;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,qBAAqB;AAC9D;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,gEAAgE,qCAAqC,sDAAe,6BAA6B;AACjJ,0BAA0B,gEAAyB,EAAE,4DAA4D;AACjH;AACA;AACA;AACA;AACA;AACA,KAAK,gCAAgC,OAAO,oDAAM,sCAAsC;AACxF;AACA,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,wDAAU;AACxB,KAAK,gBAAgB,UAAU;AAC/B,sBAAsB,oDAAM;AAC5B;AACA,aAAa,GAAG,EAAE,EAAE,QAAQ,EAAE;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,8DAAuB,EAAE,0BAA0B;AAC5E,yBAAyB,8DAAuB,EAAE,iDAAiD,qCAAqC,sDAAe,yBAAyB,EAAE;AAClL;AACA;AACA,YAAY,4DAAY;AACxB,YAAY;AACZ;AACA,KAAK,wCAAwC,OAAO,sDAAQ,EAAE,GAAG,OAAO,sDAAQ,EAAE;AAClF;AACA,cAAc,oDAAoD,gEAAyB,qBAAqB,uBAAuB,SAAS,4DAAY,EAAE,EAAE,EAAE,EAAE,EAAE;AACtK,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,sDAAQ;AACtB;AACA;AACA,oBAAoB,4DAAY;AAChC;AACA;AACA;AACA;AACA,aAAa;AACb,KAAK,gBAAgB,UAAU;AAC/B,sBAAsB,sDAAQ;AAC9B,aAAa;AACb,sBAAsB,sDAAQ;AAC9B,aAAa,GAAG,EAAE,EAAE,QAAQ,EAAE;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,MAAM;AACX;AACA;AACA;AACA,MAAM;AACN,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6FAA6F,wBAAwB;AACrH;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,wBAAwB;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,kEAAkE,kCAAkC;AACpG;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,sDAAsD;AACtD;AACA;AACA;AACA;AACA,yCAAyC,eAAe;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,sBAAsB,mBAAmB;AACzC,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,8DAA8D,gCAAgC;AAC9F;AACA,SAAS;AACT;AACA;AACA,sDAAsD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,gCAAgC,gCAAgC;AAChE;AACA;AACA,uCAAuC,gCAAgC;AACvE;AACA;AACA,mCAAmC,gCAAgC;AACnE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,oDAAoD,GAAG,QAAQ;AAC/D,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,uBAAuB,oBAAoB,GAAG,mBAAmB;AACjE;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,oCAAoC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,iBAAiB;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,0BAA0B;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,mCAAmC;AACjG;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBA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","file":"features-login-login-module-es2015.js","sourcesContent":["import { HttpErrorResponse } from '@angular/common/http';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { SnackBarService } from 'src/app/shared/services/SnackBar';\r\nimport { ForgetPasswordService } from './forget-password.service';\r\n\r\n@Component({\r\n  selector: 'app-forget-password',\r\n  templateUrl: './forget-password.component.html',\r\n  styleUrls: ['./forget-password.component.scss']\r\n})\r\nexport class ForgetPasswordComponent implements OnInit {\r\n\r\n  isLoadingResults=false;\r\n  codeValidation;\r\n  mailRecuperation;\r\n  consigne = false;\r\n  constructor(private forgetPassword: ForgetPasswordService,private route: Router,\r\n                private snackBar: SnackBarService) { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  recuperationDuMail(){\r\n    \r\n    this.forgetPassword.MailDeRecuperation(this.mailRecuperation).subscribe((data)=>{\r\n      console.log(data);\r\n      \r\n    },(error: HttpErrorResponse)=>{\r\n      console.log(error);\r\n      if(error.status>300)\r\n      {\r\n        this.isLoadingResults=false;\r\n        this.snackBar.openSnackBar(\"Mail n'existe pas ou vous vous etes inscrit automatiquement\", \"error mail\", 5000);\r\n      }\r\n      else{\r\n        this.consigne= true;\r\n        this.isLoadingResults=false;\r\n        this.snackBar.openSnackBar(\"Code de validation envoyer\",\"code de validation\", 4000);\r\n      }\r\n    })\r\n  }\r\n\r\n  envoiDuPassword(){\r\n    this.forgetPassword.envoiMailByCode(this.codeValidation).subscribe((data)=>{\r\n\r\n    },(error: HttpErrorResponse)=>{\r\n      console.log(error);\r\n      if(error.status>300)\r\n      {\r\n        this.isLoadingResults=false;\r\n        this.snackBar.openSnackBar(\"Le code inserer est incorrect veillez verifier a nouveau\", \"Code invalide\", 5000);\r\n      }\r\n      else{\r\n        this.consigne= true;\r\n        this.snackBar.openSnackBar(\"Mot de passe envoyer a votre compte mail\",\"Password modifier\", 4000);\r\n        this.route.navigate([\"/login\"]);\r\n      }\r\n    })\r\n  }\r\n\r\n  onSubmit(){\r\n    this.isLoadingResults=true;\r\n    if(this.consigne){\r\n      this.envoiDuPassword();\r\n    }\r\n    else{\r\n      this.recuperationDuMail();\r\n    }\r\n  }\r\n\r\n}\r\n","export default \".titre {\\n  font-weight: bold;\\n  font-size: 20px;\\n}\\n\\n.body {\\n  background-image: url('bg.jpg');\\n  background-repeat: no-repeat;\\n  background-size: 100%;\\n}\\n\\n.reseau {\\n  padding: 5px;\\n}\\n\\n.reseau button {\\n  padding: 5px;\\n  color: rgba(14, 14, 161, 0.767);\\n  font-weight: bold;\\n}\\n\\n.inscription {\\n  padding-left: 15px;\\n}\\n\\n.reaseau-head {\\n  text-align: center;\\n  color: rgba(14, 14, 161, 0.986);\\n  font-size: 20px;\\n  font-weight: 200px;\\n}\\n\\n@media (max-height: 768px) and (max-width: 1024px) {\\n  .reseau {\\n    padding: 0px;\\n  }\\n  .reseau button {\\n    color: rgba(14, 14, 161, 0.767);\\n    font-weight: bold;\\n    margin: 2px;\\n  }\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uXFwuLlxcLi5cXC4uXFxmb3JnZXQtcGFzc3dvcmQuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxpQkFBQTtFQUNBLGVBQUE7QUFDSjs7QUFFQTtFQUNJLCtCQUFBO0VBQ0EsNEJBQUE7RUFDQSxxQkFBQTtBQUNKOztBQUNBO0VBQ0ksWUFBQTtBQUVKOztBQURJO0VBQ0ksWUFBQTtFQUNBLCtCQUFBO0VBQ0EsaUJBQUE7QUFHUjs7QUFBQTtFQUNJLGtCQUFBO0FBR0o7O0FBQUE7RUFFSSxrQkFBQTtFQUNBLCtCQUFBO0VBQ0EsZUFBQTtFQUNBLGtCQUFBO0FBRUo7O0FBQ0E7RUFDSTtJQUNJLFlBQUE7RUFFTjtFQURNO0lBQ0ksK0JBQUE7SUFDQSxpQkFBQTtJQUNBLFdBQUE7RUFHVjtBQUNGIiwiZmlsZSI6ImZvcmdldC1wYXNzd29yZC5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi50aXRyZXtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gICAgZm9udC1zaXplOiAyMHB4O1xyXG59XHJcblxyXG4uYm9keXtcclxuICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybCgnLi8uLi8uLi8uLi9hc3NldHMvYmcuanBnJyk7XHJcbiAgICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xyXG4gICAgYmFja2dyb3VuZC1zaXplOiAxMDAlO1xyXG59XHJcbi5yZXNlYXV7XHJcbiAgICBwYWRkaW5nOiA1cHg7XHJcbiAgICBidXR0b257XHJcbiAgICAgICAgcGFkZGluZzogNXB4O1xyXG4gICAgICAgIGNvbG9yOiByZ2JhKDE0LCAxNCwgMTYxLCAwLjc2Nyk7XHJcbiAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgICB9XHJcbn1cclxuLmluc2NyaXB0aW9ue1xyXG4gICAgcGFkZGluZy1sZWZ0OiAxNXB4O1xyXG59XHJcblxyXG4ucmVhc2VhdS1oZWFke1xyXG5cclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgIGNvbG9yOiByZ2JhKDE0LCAxNCwgMTYxLCAwLjk4Nik7O1xyXG4gICAgZm9udC1zaXplOiAyMHB4O1xyXG4gICAgZm9udC13ZWlnaHQ6IDIwMHB4O1xyXG59XHJcblxyXG5AbWVkaWEgKG1heC1oZWlnaHQ6IDc2OHB4KSBhbmQgKG1heC13aWR0aDogMTAyNHB4KXtcclxuICAgIC5yZXNlYXV7XHJcbiAgICAgICAgcGFkZGluZzogMHB4O1xyXG4gICAgICAgIGJ1dHRvbntcclxuICAgICAgICAgICAgY29sb3I6IHJnYmEoMTQsIDE0LCAxNjEsIDAuNzY3KTtcclxuICAgICAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgICAgICAgICAgIG1hcmdpbjogMnB4O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSJdfQ== */\";","import { SnackBarService } from './../../shared/services/SnackBar';\r\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\r\nimport { Component, ErrorHandler, OnInit } from '@angular/core';\r\nimport { EmailValidator, FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { FacebookLoginProvider, GoogleLoginProvider, SocialAuthService, SocialUser } from 'angularx-social-login';\r\nimport { AppSettings } from 'src/app/app.settings';\r\nimport { Settings } from 'src/app/app.settings.model';\r\nimport { LoginService } from 'src/app/shared/services/authentification';\r\nimport { TokenStorageService } from '../login/_helper/localStorage';\r\nimport { MustMatch } from './_helpe';\r\nimport { emailValidator } from 'src/app/theme/utils/app-validators';\r\n\r\n@Component({\r\n  selector: 'app-inscription',\r\n  templateUrl: './inscription.component.html',\r\n  styleUrls: ['./inscription.component.scss']\r\n})\r\nexport class InscriptionComponent implements OnInit {\r\n\r\n  public formIns:FormGroup;\r\n  public settings: Settings;\r\n  user: SocialUser;\r\n  loggedIn: boolean;\r\n  hidev= true;\r\n  hide = true;\r\n  constructor(private authService: SocialAuthService,public appSettings:AppSettings, \r\n    public fb: FormBuilder, public router:Router, private http: HttpClient,\r\n     private loginS :LoginService,private token: TokenStorageService,private snackBar: SnackBarService){\r\n    this.settings = this.appSettings.settings; \r\n    this.formIns = this.fb.group({\r\n      'nom' :[null, Validators.required],\r\n      'prenom':[null, Validators.required],\r\n      'imgUrl':[null],\r\n      'provider' :[null],\r\n      'email': [null,Validators.compose([Validators.required, emailValidator])],\r\n      'password': [null, [Validators.required, Validators.minLength(6)]],\r\n      'passwordValid': [null, [Validators.required, Validators.minLength(6)]] }\r\n      , {\r\n        validator: MustMatch('password', 'passwordValid')\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    \r\n    this.authService.authState.subscribe((user) => {\r\n      this.user = user;\r\n      this.formIns.get('nom').setValue(user.firstName);\r\n      this.formIns.get('prenom').setValue(user.lastName);\r\n      //this.formIns.get('imgUrl').setValue(user.photoUrl);\r\n      this.formIns.get('provider').setValue(user.provider);\r\n      this.formIns.get('password').setValue(user.id);\r\n      this.formIns.get('passwordValid').setValue(user.id);\r\n      this.formIns.get('email').setValue(user.email);\r\n      this.onSubmit();\r\n      \r\n    });\r\n  }\r\n\r\n  signInWithGoogle(): void {\r\n    this.authService.signIn(GoogleLoginProvider.PROVIDER_ID);\r\n  }\r\n\r\n  signInWithFB(): void {\r\n    this.authService.signIn(FacebookLoginProvider.PROVIDER_ID);\r\n  }\r\n\r\n  signOut(): void {\r\n    this.authService.signOut();\r\n  }\r\n\r\n\r\n  onSubmit(){\r\n   if(this.formIns.valid){\r\n      //console.log(this.form.value)\r\n    this.loginS.inscription(this.formIns.value).subscribe((data)=>{\r\n      \r\n    },\r\n    (err: HttpErrorResponse) => {\r\n      //console.log(err);\r\n      if(err.status ==201){\r\n        this.snackBar.openSnackBar(\"Compte creer avec success\", \"Inscription\", 5000);\r\n        this.router.navigate(['/login']);\r\n      }\r\n      else{\r\n        this.formIns.reset();\r\n        this.snackBar.openSnackBar(\"Utilisateur existe deja\", \"Inscription\", 3000);\r\n        location.reload();\r\n      }\r\n    })\r\n   }\r\n   else{\r\n    this.snackBar.openSnackBar(\"Remplire les champs SVP\", \"Champs Vide\", 3000);\r\n   }\r\n  }\r\n\r\n}\r\n","export default \"<mat-sidenav-container class=\\\"body\\\">\\r\\n\\r\\n    <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center center\\\" class=\\\"h-100\\\">\\r\\n  \\r\\n         <div  fxFlex=\\\"80\\\" fxFlex.gt-sm=\\\"40\\\" fxFlex.sm=\\\"80\\\">\\r\\n  \\r\\n              <mat-card class=\\\"p-0 mat-elevation-z24 box\\\">\\r\\n                  <div fxLayout=\\\"column\\\" fxLayoutAlign=\\\"center center\\\" class=\\\"bg-primary box-header\\\">\\r\\n                      <img width=\\\"150px\\\" height=\\\"120px\\\" src=\\\"./assets/logo.png\\\">\\r\\n                      \\r\\n                  </div>\\r\\n                  <mat-card-content fxLayout=\\\"column\\\" fxLayoutAlign=\\\"end center\\\" class=\\\"box\\\" >\\r\\n                      <mat-card class=\\\"form-card\\\" fxLayout=\\\"column\\\"  class=\\\"mat-elevation-z12 box-content-inner\\\">\\r\\n                          <span class=\\\"titre\\\">Inscription</span>  \\r\\n                            <form [formGroup]=\\\"formIns\\\" #f=\\\"ngForm\\\">\\r\\n                                <div fxLayoutAlign=\\\"satrt\\\" fxLayout.lt-md=\\\"row wrap\\\" fxLayoutGap.gt-sm=\\\"20px\\\">\\r\\n                                    <span [fxFlex.xs]=\\\"100\\\" [fxFlex.sm]=\\\"100\\\" [fxFlex.md]=\\\"100\\\" [fxFlex.lg]=\\\"50\\\" [fxFlex.xl]=\\\"50\\\">\\r\\n                                      <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\" >\\r\\n                                          <mat-label>Nom</mat-label>\\r\\n                                            <input matInput placeholder=\\\"Nom\\\" formControlName=\\\"nom\\\">\\r\\n                                            <mat-error *ngIf=\\\"formIns.controls.nom.errors?.required\\\">Nom ne doit pas etre vide</mat-error>                               \\r\\n                                        </mat-form-field>\\r\\n                                    </span>\\r\\n                                    <span [fxFlex.xs]=\\\"100\\\" [fxFlex.sm]=\\\"100\\\" [fxFlex.md]=\\\"100\\\" [fxFlex.lg]=\\\"50\\\" [fxFlex.xl]=\\\"50\\\">\\r\\n                                      <mat-form-field class=\\\"form-fiel\\\" appearance=\\\"outline\\\" class=\\\"w-100\\\" >\\r\\n                                          <mat-label>Prenom</mat-label>\\r\\n                                            <input matInput placeholder=\\\"Prenom\\\" formControlName=\\\"prenom\\\">\\r\\n                                            <mat-error *ngIf=\\\"formIns.controls.prenom.errors?.required\\\">Prenom ne doit pas etre vide</mat-error> \\r\\n                                        </mat-form-field>\\r\\n                                    </span>\\r\\n                                </div>\\r\\n                                  <span fxLayoutAlign=\\\"start\\\">\\r\\n                                     <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n                                        <mat-label>Email</mat-label>\\r\\n                                          <input matInput placeholder=\\\"Email\\\" formControlName=\\\"email\\\" >\\r\\n                                          <mat-error *ngIf=\\\"formIns.controls.email.errors?.required\\\">Email ne doit pas etre vide</mat-error> \\r\\n                                          <mat-error *ngIf=\\\"formIns.controls.email.hasError('invalidEmail')\\\">Mail Invalide</mat-error>\\r\\n                                          <mat-error *ngIf=\\\"formIns.controls.email.hasError('invalidEmail')\\\">Email invalide</mat-error>\\r\\n                                      </mat-form-field>\\r\\n                                  </span>\\r\\n                              <div fxLayoutAlign=\\\"center\\\" fxLayout.lt-md=\\\"row wrap\\\" fxLayoutGap.gt-sm=\\\"20px\\\">\\r\\n                                  <span [fxFlex.xs]=\\\"100\\\" [fxFlex.sm]=\\\"100\\\" [fxFlex.md]=\\\"100\\\" [fxFlex.lg]=\\\"50\\\" [fxFlex.xl]=\\\"50\\\">\\r\\n                                    <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n                                        <mat-label>Password</mat-label>\\r\\n                                        <input matInput formControlName=\\\"password\\\" [type]=\\\"hide ? 'password' : 'text'\\\">\\r\\n                                        <button mat-icon-button matSuffix (click)=\\\"hide = !hide\\\" [attr.aria-label]=\\\"'Hide password'\\\" [attr.aria-pressed]=\\\"hide\\\">\\r\\n                                        <mat-icon>{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\\r\\n                                        </button>\\r\\n                                        <mat-error *ngIf=\\\"formIns.controls.password.errors?.required\\\">Password doit pas etre vide</mat-error>\\r\\n                                        <mat-error *ngIf=\\\"formIns.controls.password.hasError('minlength')\\\">La taille minimum est de 6 caractere</mat-error>\\r\\n                                     </mat-form-field>\\r\\n                                  </span>\\r\\n                                  <span [fxFlex.xs]=\\\"100\\\" [fxFlex.sm]=\\\"100\\\" [fxFlex.md]=\\\"100\\\" [fxFlex.lg]=\\\"50\\\" [fxFlex.xl]=\\\"50\\\">\\r\\n                                    <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\" >\\r\\n                                        <mat-label>Validation Password</mat-label>\\r\\n                                        <input matInput formControlName=\\\"passwordValid\\\" [type]=\\\"hidev ? 'password' : 'text'\\\">\\r\\n                                        <button mat-icon-button matSuffix (click)=\\\"hidev = !hidev\\\" [attr.aria-label]=\\\"'Hide password'\\\" [attr.aria-pressed]=\\\"hidev\\\">\\r\\n                                        <mat-icon>{{hidev ? 'visibility_off' : 'visibility'}}</mat-icon>\\r\\n                                        </button>\\r\\n                                        <mat-error *ngIf=\\\"formIns.controls.passwordValid.errors?.required\\\">Password doit pas etre vide</mat-error>\\r\\n                                        <mat-error *ngIf=\\\"formIns.controls.passwordValid.hasError('minlength')\\\">La taille minimum est de 6 caractere</mat-error>\\r\\n                                      </mat-form-field>\\r\\n                                  </span>\\r\\n                              </div>\\r\\n                            </form>\\r\\n                          <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start\\\">\\r\\n                            <p>J'aimerais <a mat-button routerLink=\\\"/login\\\">me connecter</a></p>\\r\\n                          </div>\\r\\n                      </mat-card>\\r\\n                      <button mat-raised-button color=\\\"primary\\\" (click)=\\\"onSubmit()\\\"  class=\\\"mat-elevation-z12 box-button\\\" type=\\\"submit\\\">S'Inscrire</button>\\r\\n                  </mat-card-content>\\r\\n                    <mat-card>\\r\\n                        <h3 class=\\\"reaseau-head\\\">s'inscrire avec </h3>\\r\\n                        <mat-card-content >\\r\\n                            <div class=\\\"reseau\\\" fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center\\\" fxLayout.lt-md=\\\"row wrap\\\" fxLayoutGap.gt-sm=\\\"20px\\\">\\r\\n                                <button (click)=\\\"signInWithGoogle()\\\" [fxFlex.xs]=\\\"45\\\" [fxFlex.sm]=\\\"45\\\" [fxFlex.md]=\\\"45\\\" [fxFlex.lg]=\\\"45\\\" [fxFlex.xl]=\\\"45\\\"\\r\\n                                  mat-raised-button  class=\\\"mat-elevation-z12 box-button\\\">\\r\\n                                  <img  width=\\\"30px\\\" height=\\\"30px\\\" src=\\\"./assets/icones/google.png\\\">\\r\\n                                     Google\\r\\n                                    </button>\\r\\n                                <button (click)=\\\"signInWithFB()\\\" [fxFlex.xs]=\\\"45\\\" [fxFlex.sm]=\\\"45\\\" [fxFlex.md]=\\\"45\\\" [fxFlex.lg]=\\\"45\\\" [fxFlex.xl]=\\\"45\\\"\\r\\n                                  mat-raised-button  class=\\\"mat-elevation-z12 box-button\\\">\\r\\n                                  <img  width=\\\"30px\\\" height=\\\"30px\\\" src=\\\"./assets/icones/facebook.png\\\">\\r\\n                                  Facebook</button>\\r\\n                              </div>\\r\\n            \\r\\n                              <!-- <div class=\\\"reseau\\\" fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center\\\" fxLayout.lt-md=\\\"row wrap\\\" fxLayoutGap.gt-sm=\\\"20px\\\">\\r\\n\\r\\n                                <button [fxFlex.xs]=\\\"45\\\" [fxFlex.sm]=\\\"45\\\" [fxFlex.md]=\\\"45\\\" [fxFlex.lg]=\\\"45\\\" [fxFlex.xl]=\\\"45\\\"\\r\\n                                  mat-raised-button  class=\\\"mat-elevation-z12 box-button\\\">\\r\\n                                  <img  width=\\\"30px\\\" height=\\\"30px\\\" src=\\\"./assets/icones/twitter.png\\\">\\r\\n                                  Twitter</button>\\r\\n\\r\\n                                <button [fxFlex.xs]=\\\"45\\\" [fxFlex.sm]=\\\"45\\\" [fxFlex.md]=\\\"45\\\" [fxFlex.lg]=\\\"45\\\" [fxFlex.xl]=\\\"45\\\"\\r\\n                                  mat-raised-button class=\\\"mat-elevation-z12 box-button\\\">\\r\\n                                  <img  width=\\\"30px\\\"  src=\\\"./assets/icones/linkedin.png\\\">\\r\\n                                  Linkedin</button>\\r\\n                              </div> -->\\r\\n                        </mat-card-content>\\r\\n                    </mat-card>\\r\\n              </mat-card>\\r\\n            </div>\\r\\n    </div>\\r\\n  \\r\\n  </mat-sidenav-container>\";","export default \".titre {\\n  font-weight: bold;\\n  font-size: 20px;\\n}\\n\\n.body {\\n  background-image: url('bg.jpg');\\n  background-repeat: no-repeat;\\n  background-size: 100%;\\n}\\n\\n.reseau {\\n  padding: 5px;\\n}\\n\\n.reseau button {\\n  padding: 5px;\\n  color: rgba(14, 14, 161, 0.767);\\n  font-weight: bold;\\n}\\n\\n.inscription {\\n  padding-left: 15px;\\n}\\n\\n.reaseau-head {\\n  text-align: center;\\n  color: rgba(14, 14, 161, 0.986);\\n  font-size: 20px;\\n  font-weight: 200px;\\n}\\n\\n@media (max-height: 768px) and (max-width: 1024px) {\\n  .reseau {\\n    padding: 0px;\\n  }\\n  .reseau button {\\n    color: rgba(14, 14, 161, 0.767);\\n    font-weight: bold;\\n    margin: 2px;\\n  }\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uXFwuLlxcLi5cXC4uXFxsb2dpbi5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLGlCQUFBO0VBQ0EsZUFBQTtBQUNKOztBQUVBO0VBQ0ksK0JBQUE7RUFDQSw0QkFBQTtFQUNBLHFCQUFBO0FBQ0o7O0FBQ0E7RUFDSSxZQUFBO0FBRUo7O0FBREk7RUFDSSxZQUFBO0VBQ0EsK0JBQUE7RUFDQSxpQkFBQTtBQUdSOztBQUFBO0VBQ0ksa0JBQUE7QUFHSjs7QUFBQTtFQUVJLGtCQUFBO0VBQ0EsK0JBQUE7RUFDQSxlQUFBO0VBQ0Esa0JBQUE7QUFFSjs7QUFDQTtFQUNJO0lBQ0ksWUFBQTtFQUVOO0VBRE07SUFDSSwrQkFBQTtJQUNBLGlCQUFBO0lBQ0EsV0FBQTtFQUdWO0FBQ0YiLCJmaWxlIjoibG9naW4uY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIudGl0cmV7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxuICAgIGZvbnQtc2l6ZTogMjBweDtcclxufVxyXG5cclxuLmJvZHl7XHJcbiAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJy4vLi4vLi4vLi4vYXNzZXRzL2JnLmpwZycpO1xyXG4gICAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcclxuICAgIGJhY2tncm91bmQtc2l6ZTogMTAwJTtcclxufVxyXG4ucmVzZWF1e1xyXG4gICAgcGFkZGluZzogNXB4O1xyXG4gICAgYnV0dG9ue1xyXG4gICAgICAgIHBhZGRpbmc6IDVweDtcclxuICAgICAgICBjb2xvcjogcmdiYSgxNCwgMTQsIDE2MSwgMC43NjcpO1xyXG4gICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gICAgfVxyXG59XHJcbi5pbnNjcmlwdGlvbntcclxuICAgIHBhZGRpbmctbGVmdDogMTVweDtcclxufVxyXG5cclxuLnJlYXNlYXUtaGVhZHtcclxuXHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICBjb2xvcjogcmdiYSgxNCwgMTQsIDE2MSwgMC45ODYpOztcclxuICAgIGZvbnQtc2l6ZTogMjBweDtcclxuICAgIGZvbnQtd2VpZ2h0OiAyMDBweDtcclxufVxyXG5cclxuQG1lZGlhIChtYXgtaGVpZ2h0OiA3NjhweCkgYW5kIChtYXgtd2lkdGg6IDEwMjRweCl7XHJcbiAgICAucmVzZWF1e1xyXG4gICAgICAgIHBhZGRpbmc6IDBweDtcclxuICAgICAgICBidXR0b257XHJcbiAgICAgICAgICAgIGNvbG9yOiByZ2JhKDE0LCAxNCwgMTYxLCAwLjc2Nyk7XHJcbiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gICAgICAgICAgICBtYXJnaW46IDJweDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iXX0= */\";","export default \".titre {\\n  font-weight: bold;\\n  font-size: 20px;\\n  text-align: center;\\n}\\n\\n.reseau {\\n  padding: 5px;\\n}\\n\\n.reseau button {\\n  padding: 5px;\\n  color: rgba(14, 14, 161, 0.767);\\n  font-weight: bold;\\n}\\n\\n.inscription {\\n  padding-left: 15px;\\n}\\n\\n.reaseau-head {\\n  text-align: center;\\n  color: rgba(14, 14, 161, 0.986);\\n  font-size: 20px;\\n  font-weight: 200px;\\n}\\n\\n.box {\\n  width: 100%;\\n}\\n\\n.box .form-card {\\n  width: 80%;\\n}\\n\\n.form-fiel {\\n  width: 100%;\\n}\\n\\n.form-fiel input {\\n  width: 100%;\\n}\\n\\n@media (max-height: 768px) and (max-width: 1024px) {\\n  .reseau {\\n    padding: 0px;\\n  }\\n  .reseau button {\\n    color: rgba(14, 14, 161, 0.767);\\n    font-weight: bold;\\n    margin: 2px;\\n  }\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uXFwuLlxcLi5cXC4uXFxpbnNjcmlwdGlvbi5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLGlCQUFBO0VBQ0EsZUFBQTtFQUNBLGtCQUFBO0FBQ0o7O0FBR0E7RUFDSSxZQUFBO0FBQUo7O0FBQ0k7RUFDSSxZQUFBO0VBQ0EsK0JBQUE7RUFDQSxpQkFBQTtBQUNSOztBQUVBO0VBQ0ksa0JBQUE7QUFDSjs7QUFFQTtFQUVJLGtCQUFBO0VBQ0EsK0JBQUE7RUFDQSxlQUFBO0VBQ0Esa0JBQUE7QUFBSjs7QUFHQTtFQUNJLFdBQUE7QUFBSjs7QUFDSTtFQUNJLFVBQUE7QUFDUjs7QUFHQTtFQUNJLFdBQUE7QUFBSjs7QUFDSTtFQUNJLFdBQUE7QUFDUjs7QUFHQTtFQUNJO0lBQ0ksWUFBQTtFQUFOO0VBQ007SUFDSSwrQkFBQTtJQUNBLGlCQUFBO0lBQ0EsV0FBQTtFQUNWO0FBQ0YiLCJmaWxlIjoiaW5zY3JpcHRpb24uY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIudGl0cmV7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxuICAgIGZvbnQtc2l6ZTogMjBweDtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxufVxyXG5cclxuXHJcbi5yZXNlYXV7XHJcbiAgICBwYWRkaW5nOiA1cHg7XHJcbiAgICBidXR0b257XHJcbiAgICAgICAgcGFkZGluZzogNXB4O1xyXG4gICAgICAgIGNvbG9yOiByZ2JhKDE0LCAxNCwgMTYxLCAwLjc2Nyk7XHJcbiAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgICB9XHJcbn1cclxuLmluc2NyaXB0aW9ue1xyXG4gICAgcGFkZGluZy1sZWZ0OiAxNXB4O1xyXG59XHJcblxyXG4ucmVhc2VhdS1oZWFke1xyXG5cclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgIGNvbG9yOiByZ2JhKDE0LCAxNCwgMTYxLCAwLjk4Nik7O1xyXG4gICAgZm9udC1zaXplOiAyMHB4O1xyXG4gICAgZm9udC13ZWlnaHQ6IDIwMHB4O1xyXG59XHJcblxyXG4uYm94e1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICAuZm9ybS1jYXJke1xyXG4gICAgICAgIHdpZHRoOiA4MCU7XHJcbiAgICB9XHJcbn1cclxuXHJcbi5mb3JtLWZpZWx7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIGlucHV0e1xyXG4gICAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgfVxyXG59XHJcblxyXG5AbWVkaWEgKG1heC1oZWlnaHQ6IDc2OHB4KSBhbmQgKG1heC13aWR0aDogMTAyNHB4KXtcclxuICAgIC5yZXNlYXV7XHJcbiAgICAgICAgcGFkZGluZzogMHB4O1xyXG4gICAgICAgIGJ1dHRvbntcclxuICAgICAgICAgICAgY29sb3I6IHJnYmEoMTQsIDE0LCAxNjEsIDAuNzY3KTtcclxuICAgICAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgICAgICAgICAgIG1hcmdpbjogMnB4O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSJdfQ== */\";","export default \"<mat-sidenav-container >\\r\\n\\r\\n    <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center center\\\" class=\\\"h-100\\\">\\r\\n  \\r\\n         <form [formGroup]=\\\"form\\\"  fxFlex=\\\"80\\\" fxFlex.gt-sm=\\\"30\\\" fxFlex.sm=\\\"60\\\">\\r\\n  \\r\\n              <mat-card class=\\\"p-0 mat-elevation-z24 box\\\">\\r\\n                  <div fxLayout=\\\"column\\\" fxLayoutAlign=\\\"center center\\\" class=\\\"bg-primary box-header\\\">\\r\\n                      <img width=\\\"150px\\\" height=\\\"120px\\\" src=\\\"./assets/logo.png\\\">\\r\\n                      \\r\\n                  </div>\\r\\n                  <mat-card-content fxLayout=\\\"column\\\" fxLayoutAlign=\\\"end center\\\" class=\\\"box-content\\\">\\r\\n                      <mat-card fxLayout=\\\"column\\\" fxLayoutAlign=\\\"center center\\\" class=\\\"mat-elevation-z12 box-content-inner\\\">\\r\\n                          <span class=\\\"titre\\\">Connexion</span>  \\r\\n                          <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n                            <mat-label>Username</mat-label>\\r\\n                              <input matInput placeholder=\\\"Email\\\" formControlName=\\\"email\\\">\\r\\n                              <mat-error *ngIf=\\\"form.controls.email.errors?.required\\\">Email ne doit pas etre vide</mat-error>\\r\\n                              <mat-error *ngIf=\\\"form.controls.email.hasError('invalidEmail')\\\">Email invalide</mat-error>\\r\\n                          </mat-form-field>\\r\\n                          <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n                              <mat-label>Password</mat-label>\\r\\n                              <mat-icon matPrefix>lock</mat-icon>\\r\\n                            <input matInput formControlName=\\\"password\\\" [type]=\\\"hide ? 'password' : 'text'\\\">\\r\\n                            <button mat-icon-button matSuffix (click)=\\\"hide = !hide\\\" [attr.aria-label]=\\\"'Hide password'\\\" [attr.aria-pressed]=\\\"hide\\\">\\r\\n                            <mat-icon>{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\\r\\n                            </button>\\r\\n\\r\\n                              <mat-error *ngIf=\\\"form.controls.password.errors?.required\\\">password ne doit pas etre vide</mat-error>\\r\\n                              <mat-error *ngIf=\\\"form.controls.password.hasError('minlength')\\\">La longueur du mot de passe est de 6 caractere minimum</mat-error>\\r\\n                          </mat-form-field>\\r\\n                          <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start\\\">\\r\\n\\r\\n                          </div>\\r\\n                      </mat-card>\\r\\n                      <button mat-raised-button color=\\\"primary\\\" (click)=\\\"onSubmit()\\\" class=\\\"mat-elevation-z12 box-button\\\" type=\\\"submit\\\">Connexion</button>\\r\\n                  </mat-card-content>\\r\\n                  <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start\\\">\\r\\n                    <mat-card-content class=\\\"inscription\\\">\\r\\n                        <p>J'aimerais <a mat-button routerLink=\\\"/login/inscription\\\">m'inscrire</a></p>\\r\\n                    </mat-card-content>\\r\\n                  </div>\\r\\n                  <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center\\\">\\r\\n                    <mat-card-content class=\\\"inscription\\\">\\r\\n                        <p><a mat-button routerLink=\\\"/login/forgetpassword\\\">mot de passe oublier</a></p>\\r\\n                    </mat-card-content>\\r\\n                  </div>\\r\\n                    <mat-card>\\r\\n                        <h3 class=\\\"reaseau-head\\\">se connecter avec </h3>\\r\\n                        <mat-card-content >\\r\\n                            <div class=\\\"reseau\\\" fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center\\\" fxLayout.lt-md=\\\"row wrap\\\" fxLayoutGap.gt-sm=\\\"20px\\\">\\r\\n                                <button (click)=\\\"signInWithGoogle()\\\" [fxFlex.xs]=\\\"45\\\" [fxFlex.sm]=\\\"45\\\" [fxFlex.md]=\\\"45\\\" [fxFlex.lg]=\\\"45\\\" [fxFlex.xl]=\\\"45\\\"\\r\\n                                  mat-raised-button  class=\\\"mat-elevation-z12 box-button\\\">\\r\\n                                  <img  width=\\\"30px\\\" height=\\\"30px\\\" src=\\\"./assets/icones/google.png\\\">\\r\\n                                     Google\\r\\n                                    </button>\\r\\n                                <button (click)=\\\"signInWithFB()\\\" [fxFlex.xs]=\\\"45\\\" [fxFlex.sm]=\\\"45\\\" [fxFlex.md]=\\\"45\\\" [fxFlex.lg]=\\\"45\\\" [fxFlex.xl]=\\\"45\\\"\\r\\n                                  mat-raised-button  class=\\\"mat-elevation-z12 box-button\\\">\\r\\n                                  <img  width=\\\"30px\\\" height=\\\"30px\\\" src=\\\"./assets/icones/facebook.png\\\">\\r\\n                                  Facebook</button>\\r\\n                              </div>\\r\\n<!--             \\r\\n                              <div class=\\\"reseau\\\" fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center\\\" fxLayout.lt-md=\\\"row wrap\\\" fxLayoutGap.gt-sm=\\\"20px\\\">\\r\\n\\r\\n                                <button [fxFlex.xs]=\\\"45\\\" [fxFlex.sm]=\\\"45\\\" [fxFlex.md]=\\\"45\\\" [fxFlex.lg]=\\\"45\\\" [fxFlex.xl]=\\\"45\\\"\\r\\n                                  mat-raised-button  class=\\\"mat-elevation-z12 box-button\\\">\\r\\n                                  <img  width=\\\"30px\\\" height=\\\"30px\\\" src=\\\"./assets/icones/twitter.png\\\">\\r\\n                                  Twitter</button>\\r\\n\\r\\n                                <button [fxFlex.xs]=\\\"45\\\" [fxFlex.sm]=\\\"45\\\" [fxFlex.md]=\\\"45\\\" [fxFlex.lg]=\\\"45\\\" [fxFlex.xl]=\\\"45\\\"\\r\\n                                  mat-raised-button class=\\\"mat-elevation-z12 box-button\\\">\\r\\n                                  <img  width=\\\"30px\\\"  src=\\\"./assets/icones/linkedin.png\\\">\\r\\n                                  Linkedin</button>\\r\\n\\r\\n                              </div> -->\\r\\n                        </mat-card-content>\\r\\n                    </mat-card>\\r\\n              </mat-card>\\r\\n              \\r\\n          </form>    \\r\\n    \\r\\n    </div>\\r\\n  \\r\\n  </mat-sidenav-container>\";","export default \"\\r\\n\\r\\n<mat-sidenav-container >\\r\\n    <div *ngIf=\\\"isLoadingResults\\\" fxLayout=\\\"column\\\" fxLayoutAlign=\\\"center center\\\" class=\\\"user-spinner\\\">   \\r\\n        <mat-spinner color=\\\"primary\\\"></mat-spinner>\\r\\n      </div>\\r\\n    <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center center\\\" class=\\\"h-100\\\">\\r\\n         <form   fxFlex=\\\"80\\\" fxFlex.gt-sm=\\\"30\\\" fxFlex.sm=\\\"60\\\">\\r\\n              <mat-card class=\\\"p-0 mat-elevation-z24 box\\\">\\r\\n                  <div fxLayout=\\\"column\\\" fxLayoutAlign=\\\"center center\\\" class=\\\"bg-primary box-header\\\">\\r\\n                      <img width=\\\"150px\\\" height=\\\"120px\\\" src=\\\"./assets/logo.png\\\">\\r\\n                      \\r\\n                  </div>\\r\\n                  <mat-card-content fxLayout=\\\"column\\\" fxLayoutAlign=\\\"end center\\\" class=\\\"box-content\\\">\\r\\n                      <mat-card fxLayout=\\\"column\\\" fxLayoutAlign=\\\"center center\\\" class=\\\"mat-elevation-z12 box-content-inner\\\">\\r\\n                          <span class=\\\"titre\\\">Mot de passe oublier</span>  \\r\\n                          <mat-form-field *ngIf=\\\"!consigne\\\" appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n                            <mat-label>Mail de recuperation</mat-label>\\r\\n                              <input [(ngModel)]=\\\"mailRecuperation\\\" matInput type=\\\"email\\\" placeholder=\\\"Mail de recuperation\\\" name=\\\"mailRecuperation\\\">\\r\\n                              <!-- <mat-error *ngIf=\\\"form.controls.email.errors?.required\\\">Email is required</mat-error>\\r\\n                              <mat-error *ngIf=\\\"form.controls.email.hasError('invalidEmail')\\\">Invalid email address</mat-error> -->\\r\\n                          </mat-form-field>\\r\\n                          <mat-form-field *ngIf=\\\"consigne\\\" appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n                            <mat-label>Code de validation</mat-label>\\r\\n                              <input [(ngModel)]=\\\"codeValidation\\\" matInput type=\\\"email\\\" placeholder=\\\"Code de validation\\\" name=\\\"codeValidation\\\">\\r\\n                              <!-- <mat-error *ngIf=\\\"form.controls.email.errors?.required\\\">Email is required</mat-error>\\r\\n                              <mat-error *ngIf=\\\"form.controls.email.hasError('invalidEmail')\\\">Invalid email address</mat-error> -->\\r\\n                          </mat-form-field>\\r\\n                          <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start\\\">\\r\\n                          </div>\\r\\n                      </mat-card>\\r\\n                      <button mat-raised-button (click)=\\\"onSubmit()\\\" color=\\\"primary\\\" class=\\\"mat-elevation-z12 box-button\\\" type=\\\"submit\\\">Valider</button>\\r\\n                  </mat-card-content>\\r\\n                  <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start\\\">\\r\\n                    <mat-card-content class=\\\"inscription\\\">\\r\\n                        <p>J'aimerais <a mat-button routerLink=\\\"/login\\\">me connecter</a></p>\\r\\n                    </mat-card-content>\\r\\n                </div>\\r\\n              </mat-card>\\r\\n              \\r\\n          </form>    \\r\\n    \\r\\n    </div>\\r\\n  \\r\\n  </mat-sidenav-container>\";","import { FormGroup, FormControl } from '@angular/forms';\r\n\r\nexport function emailValidator(control: FormControl): {[key: string]: any} {\r\n    var emailRegexp = /[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,3}$/;    \r\n    if (control.value && !emailRegexp.test(control.value)) {\r\n        return {invalidEmail: true};\r\n    }\r\n}\r\n\r\nexport function matchingPasswords(passwordKey: string, passwordConfirmationKey: string) {\r\n    return (group: FormGroup) => {\r\n        let password= group.controls[passwordKey];\r\n        let passwordConfirmation= group.controls[passwordConfirmationKey];\r\n        if (password.value !== passwordConfirmation.value) {\r\n            return passwordConfirmation.setErrors({mismatchedPasswords: true})\r\n        }\r\n    }\r\n}","import { Injectable, Inject, NgModule, Optional, SkipSelf } from '@angular/core';\nimport { ReplaySubject, AsyncSubject } from 'rxjs';\nimport { CommonModule } from '@angular/common';\n\nimport * as ɵngcc0 from '@angular/core';\nclass BaseLoginProvider {\r\n    constructor() { }\r\n    loadScript(id, src, onload, parentElement = null) {\r\n        // get document if platform is only browser\r\n        if (typeof document !== 'undefined' && !document.getElementById(id)) {\r\n            let signInJS = document.createElement('script');\r\n            signInJS.async = true;\r\n            signInJS.src = src;\r\n            signInJS.onload = onload;\r\n            if (!parentElement) {\r\n                parentElement = document.head;\r\n            }\r\n            parentElement.appendChild(signInJS);\r\n        }\r\n    }\r\n}\n\nclass SocialUser {\r\n}\n\nclass GoogleLoginProvider extends BaseLoginProvider {\r\n    constructor(clientId, initOptions = { scope: 'email' }) {\r\n        super();\r\n        this.clientId = clientId;\r\n        this.initOptions = initOptions;\r\n    }\r\n    initialize() {\r\n        return new Promise((resolve, reject) => {\r\n            try {\r\n                this.loadScript(GoogleLoginProvider.PROVIDER_ID, 'https://apis.google.com/js/platform.js', () => {\r\n                    gapi.load('auth2', () => {\r\n                        this.auth2 = gapi.auth2.init(Object.assign(Object.assign({}, this.initOptions), { client_id: this.clientId }));\r\n                        this.auth2\r\n                            .then(() => {\r\n                            resolve();\r\n                        })\r\n                            .catch((err) => {\r\n                            reject(err);\r\n                        });\r\n                    });\r\n                });\r\n            }\r\n            catch (err) {\r\n                reject(err);\r\n            }\r\n        });\r\n    }\r\n    getLoginStatus(loginStatusOptions) {\r\n        return new Promise((resolve, reject) => {\r\n            if (this.auth2.isSignedIn.get()) {\r\n                let user = new SocialUser();\r\n                const profile = this.auth2.currentUser.get().getBasicProfile();\r\n                user.id = profile.getId();\r\n                user.name = profile.getName();\r\n                user.email = profile.getEmail();\r\n                user.photoUrl = profile.getImageUrl();\r\n                user.firstName = profile.getGivenName();\r\n                user.lastName = profile.getFamilyName();\r\n                user.response = profile;\r\n                if (loginStatusOptions && loginStatusOptions.refreshToken) {\r\n                    this.auth2.currentUser.get().reloadAuthResponse().then(authResponse => {\r\n                        user.authToken = authResponse.access_token;\r\n                        user.idToken = authResponse.id_token;\r\n                        resolve(user);\r\n                    });\r\n                }\r\n                else {\r\n                    const authResponse = this.auth2.currentUser.get().getAuthResponse(true);\r\n                    user.authToken = authResponse.access_token;\r\n                    user.idToken = authResponse.id_token;\r\n                    resolve(user);\r\n                }\r\n            }\r\n            else {\r\n                reject(`No user is currently logged in with ${GoogleLoginProvider.PROVIDER_ID}`);\r\n            }\r\n        });\r\n    }\r\n    signIn(signInOptions) {\r\n        const options = Object.assign(Object.assign({}, this.initOptions), signInOptions);\r\n        return new Promise((resolve, reject) => {\r\n            const offlineAccess = options && options.offline_access;\r\n            let promise = !offlineAccess\r\n                ? this.auth2.signIn(signInOptions)\r\n                : this.auth2.grantOfflineAccess(signInOptions);\r\n            promise\r\n                .then((response) => {\r\n                let user = new SocialUser();\r\n                if (response && response.code) {\r\n                    user.authorizationCode = response.code;\r\n                }\r\n                else {\r\n                    let profile = this.auth2.currentUser.get().getBasicProfile();\r\n                    let token = this.auth2.currentUser.get().getAuthResponse(true)\r\n                        .access_token;\r\n                    let backendToken = this.auth2.currentUser\r\n                        .get()\r\n                        .getAuthResponse(true).id_token;\r\n                    user.id = profile.getId();\r\n                    user.name = profile.getName();\r\n                    user.email = profile.getEmail();\r\n                    user.photoUrl = profile.getImageUrl();\r\n                    user.firstName = profile.getGivenName();\r\n                    user.lastName = profile.getFamilyName();\r\n                    user.authToken = token;\r\n                    user.idToken = backendToken;\r\n                    user.response = profile;\r\n                }\r\n                resolve(user);\r\n            }, (closed) => {\r\n                reject(closed);\r\n            })\r\n                .catch((err) => {\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n    signOut(revoke) {\r\n        return new Promise((resolve, reject) => {\r\n            let signOutPromise;\r\n            if (revoke) {\r\n                signOutPromise = this.auth2.disconnect();\r\n            }\r\n            else {\r\n                signOutPromise = this.auth2.signOut();\r\n            }\r\n            signOutPromise\r\n                .then((err) => {\r\n                if (err) {\r\n                    reject(err);\r\n                }\r\n                else {\r\n                    resolve();\r\n                }\r\n            })\r\n                .catch((err) => {\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n}\r\nGoogleLoginProvider.PROVIDER_ID = 'GOOGLE';\n\n/** @dynamic */\r\nclass SocialAuthService {\r\n    constructor(config) {\r\n        this.providers = new Map();\r\n        this.autoLogin = false;\r\n        this._user = null;\r\n        this._authState = new ReplaySubject(1);\r\n        /* Consider making this an enum comprising LOADING, LOADED, FAILED etc. */\r\n        this.initialized = false;\r\n        this._initState = new AsyncSubject();\r\n        if (config instanceof Promise) {\r\n            config.then((config) => {\r\n                this.initialize(config);\r\n            });\r\n        }\r\n        else {\r\n            this.initialize(config);\r\n        }\r\n    }\r\n    get authState() {\r\n        return this._authState.asObservable();\r\n    }\r\n    get initState() {\r\n        return this._initState.asObservable();\r\n    }\r\n    initialize(config) {\r\n        this.autoLogin = config.autoLogin !== undefined ? config.autoLogin : false;\r\n        const { onError = console.error } = config;\r\n        config.providers.forEach((item) => {\r\n            this.providers.set(item.id, item.provider);\r\n        });\r\n        Promise.all(Array.from(this.providers.values()).map((provider) => provider.initialize()))\r\n            .then(() => {\r\n            if (this.autoLogin) {\r\n                const loginStatusPromises = [];\r\n                let loggedIn = false;\r\n                this.providers.forEach((provider, key) => {\r\n                    let promise = provider.getLoginStatus();\r\n                    loginStatusPromises.push(promise);\r\n                    promise\r\n                        .then((user) => {\r\n                        user.provider = key;\r\n                        this._user = user;\r\n                        this._authState.next(user);\r\n                        loggedIn = true;\r\n                    })\r\n                        .catch(console.debug);\r\n                });\r\n                Promise.all(loginStatusPromises).catch(() => {\r\n                    if (!loggedIn) {\r\n                        this._user = null;\r\n                        this._authState.next(null);\r\n                    }\r\n                });\r\n            }\r\n        })\r\n            .catch((error) => {\r\n            onError(error);\r\n        })\r\n            .finally(() => {\r\n            this.initialized = true;\r\n            this._initState.next(this.initialized);\r\n            this._initState.complete();\r\n        });\r\n    }\r\n    refreshAuthToken(providerId) {\r\n        return new Promise((resolve, reject) => {\r\n            if (!this.initialized) {\r\n                reject(SocialAuthService.ERR_NOT_INITIALIZED);\r\n            }\r\n            else if (providerId !== GoogleLoginProvider.PROVIDER_ID) {\r\n                reject(SocialAuthService.ERR_NOT_SUPPORTED_FOR_REFRESH_TOKEN);\r\n            }\r\n            else {\r\n                const providerObject = this.providers.get(providerId);\r\n                if (providerObject) {\r\n                    providerObject\r\n                        .getLoginStatus({ refreshToken: true })\r\n                        .then((user) => {\r\n                        user.provider = providerId;\r\n                        this._user = user;\r\n                        this._authState.next(user);\r\n                        resolve();\r\n                    })\r\n                        .catch((err) => {\r\n                        reject(err);\r\n                    });\r\n                }\r\n                else {\r\n                    reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    signIn(providerId, signInOptions) {\r\n        return new Promise((resolve, reject) => {\r\n            if (!this.initialized) {\r\n                reject(SocialAuthService.ERR_NOT_INITIALIZED);\r\n            }\r\n            else {\r\n                let providerObject = this.providers.get(providerId);\r\n                if (providerObject) {\r\n                    providerObject\r\n                        .signIn(signInOptions)\r\n                        .then((user) => {\r\n                        user.provider = providerId;\r\n                        resolve(user);\r\n                        this._user = user;\r\n                        this._authState.next(user);\r\n                    })\r\n                        .catch((err) => {\r\n                        reject(err);\r\n                    });\r\n                }\r\n                else {\r\n                    reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    signOut(revoke = false) {\r\n        return new Promise((resolve, reject) => {\r\n            if (!this.initialized) {\r\n                reject(SocialAuthService.ERR_NOT_INITIALIZED);\r\n            }\r\n            else if (!this._user) {\r\n                reject(SocialAuthService.ERR_NOT_LOGGED_IN);\r\n            }\r\n            else {\r\n                let providerId = this._user.provider;\r\n                let providerObject = this.providers.get(providerId);\r\n                if (providerObject) {\r\n                    providerObject\r\n                        .signOut(revoke)\r\n                        .then(() => {\r\n                        resolve();\r\n                        this._user = null;\r\n                        this._authState.next(null);\r\n                    })\r\n                        .catch((err) => {\r\n                        reject(err);\r\n                    });\r\n                }\r\n                else {\r\n                    reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\nSocialAuthService.ɵfac = function SocialAuthService_Factory(t) { return new (t || SocialAuthService)(ɵngcc0.ɵɵinject('SocialAuthServiceConfig')); };\nSocialAuthService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: SocialAuthService, factory: SocialAuthService.ɵfac });\r\nSocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND = 'Login provider not found';\r\nSocialAuthService.ERR_NOT_LOGGED_IN = 'Not logged in';\r\nSocialAuthService.ERR_NOT_INITIALIZED = 'Login providers not ready yet. Are there errors on your console?';\r\nSocialAuthService.ERR_NOT_SUPPORTED_FOR_REFRESH_TOKEN = 'Chosen login provider is not supported for refreshing a token';\r\nSocialAuthService.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Inject, args: ['SocialAuthServiceConfig',] }] }\r\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SocialAuthService, [{\n        type: Injectable\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: ['SocialAuthServiceConfig']\n            }] }]; }, null); })();\n\nclass SocialLoginModule {\r\n    constructor(parentModule) {\r\n        if (parentModule) {\r\n            throw new Error('SocialLoginModule is already loaded. Import it in the AppModule only');\r\n        }\r\n    }\r\n    static initialize(config) {\r\n        return {\r\n            ngModule: SocialLoginModule,\r\n            providers: [\r\n                SocialAuthService,\r\n                {\r\n                    provide: 'SocialAuthServiceConfig',\r\n                    useValue: config\r\n                }\r\n            ]\r\n        };\r\n    }\r\n}\nSocialLoginModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: SocialLoginModule });\nSocialLoginModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function SocialLoginModule_Factory(t) { return new (t || SocialLoginModule)(ɵngcc0.ɵɵinject(SocialLoginModule, 12)); }, providers: [\n        SocialAuthService\n    ], imports: [[\n            CommonModule\n        ]] });\r\nSocialLoginModule.ctorParameters = () => [\r\n    { type: SocialLoginModule, decorators: [{ type: Optional }, { type: SkipSelf }] }\r\n];\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(SocialLoginModule, { imports: function () { return [CommonModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SocialLoginModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    CommonModule\n                ],\n                providers: [\n                    SocialAuthService\n                ]\n            }]\n    }], function () { return [{ type: SocialLoginModule, decorators: [{\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }]; }, null); })();\n\n// Simulates login / logout without actually requiring an Internet connection.\r\n//\r\n// Useful for certain development situations.\r\n//\r\n// For example, if you want to simulate the greatest football referee England has ever produced:\r\n//\r\n//  const dummyUser: SocialUser = {\r\n//     id: '0123456789',\r\n//     name: 'Howard Webb',\r\n//     email: 'howard@webb.com',\r\n//     firstName: 'Howard',\r\n//     lastName: 'Webb',\r\n//     authToken: 'dummyAuthToken',\r\n//     photoUrl: 'https://en.wikipedia.org/wiki/Howard_Webb#/media/File:Howard_Webb_march11.jpg',\r\n//     provider: 'DUMMY',\r\n//     idToken: 'dummyIdToken',\r\n//     authorizationCode: 'dummyAuthCode'\r\n// };\r\n//\r\n//  let config = new AuthServiceConfig([\r\n//  { ... },\r\n//  {\r\n//       id: DummyLoginProvider.PROVIDER_ID,\r\n//       provider: new DummyLoginProvider(dummyUser)  // Pass your user into the constructor\r\n//   },\r\n//  { ... }\r\n//  ]);\r\nclass DummyLoginProvider extends BaseLoginProvider {\r\n    constructor(dummy) {\r\n        super();\r\n        if (dummy) {\r\n            this.dummy = dummy;\r\n        }\r\n        else {\r\n            this.dummy = DummyLoginProvider.DEFAULT_USER;\r\n        }\r\n        // Start not logged in\r\n        this.loggedIn = false;\r\n    }\r\n    getLoginStatus() {\r\n        return new Promise((resolve, reject) => {\r\n            if (this.loggedIn) {\r\n                resolve(this.dummy);\r\n            }\r\n            else {\r\n                reject('No user is currently logged in.');\r\n            }\r\n        });\r\n    }\r\n    initialize() {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    }\r\n    signIn() {\r\n        return new Promise((resolve, reject) => {\r\n            this.loggedIn = true;\r\n            resolve(this.dummy);\r\n        });\r\n    }\r\n    signOut(revoke) {\r\n        return new Promise((resolve, reject) => {\r\n            this.loggedIn = false;\r\n            resolve();\r\n        });\r\n    }\r\n}\r\nDummyLoginProvider.PROVIDER_ID = 'DUMMY';\r\nDummyLoginProvider.DEFAULT_USER = {\r\n    id: '1234567890',\r\n    name: 'Mickey Mouse',\r\n    email: 'mickey@mouse.com',\r\n    firstName: 'Mickey',\r\n    lastName: 'Mouse',\r\n    authToken: 'dummyAuthToken',\r\n    photoUrl: 'https://en.wikipedia.org/wiki/File:Mickey_Mouse.png',\r\n    provider: 'DUMMY',\r\n    idToken: 'dummyIdToken',\r\n    authorizationCode: 'dummyAuthCode',\r\n    response: {}\r\n};\n\nclass FacebookLoginProvider extends BaseLoginProvider {\r\n    constructor(clientId, initOptions = {\r\n        scope: 'email,public_profile',\r\n        locale: 'en_US',\r\n        fields: 'name,email,picture,first_name,last_name',\r\n        version: 'v4.0',\r\n    }) {\r\n        super();\r\n        this.clientId = clientId;\r\n        this.initOptions = initOptions;\r\n    }\r\n    initialize() {\r\n        return new Promise((resolve, reject) => {\r\n            try {\r\n                this.loadScript(FacebookLoginProvider.PROVIDER_ID, `//connect.facebook.net/${this.initOptions.locale}/sdk.js`, () => {\r\n                    FB.init({\r\n                        appId: this.clientId,\r\n                        autoLogAppEvents: true,\r\n                        cookie: true,\r\n                        xfbml: true,\r\n                        version: this.initOptions.version,\r\n                    });\r\n                    resolve();\r\n                });\r\n            }\r\n            catch (err) {\r\n                reject(err);\r\n            }\r\n        });\r\n    }\r\n    getLoginStatus() {\r\n        return new Promise((resolve, reject) => {\r\n            FB.getLoginStatus((response) => {\r\n                if (response.status === 'connected') {\r\n                    let authResponse = response.authResponse;\r\n                    FB.api(`/me?fields=${this.initOptions.fields}`, (fbUser) => {\r\n                        let user = new SocialUser();\r\n                        user.id = fbUser.id;\r\n                        user.name = fbUser.name;\r\n                        user.email = fbUser.email;\r\n                        user.photoUrl =\r\n                            'https://graph.facebook.com/' +\r\n                                fbUser.id +\r\n                                '/picture?type=normal';\r\n                        user.firstName = fbUser.first_name;\r\n                        user.lastName = fbUser.last_name;\r\n                        user.authToken = authResponse.accessToken;\r\n                        user.response = fbUser;\r\n                        resolve(user);\r\n                    });\r\n                }\r\n                else {\r\n                    reject(`No user is currently logged in with ${FacebookLoginProvider.PROVIDER_ID}`);\r\n                }\r\n            });\r\n        });\r\n    }\r\n    signIn(signInOptions) {\r\n        const options = Object.assign(Object.assign({}, this.initOptions), signInOptions);\r\n        return new Promise((resolve, reject) => {\r\n            FB.login((response) => {\r\n                if (response.authResponse) {\r\n                    let authResponse = response.authResponse;\r\n                    FB.api(`/me?fields=${options.fields}`, (fbUser) => {\r\n                        let user = new SocialUser();\r\n                        user.id = fbUser.id;\r\n                        user.name = fbUser.name;\r\n                        user.email = fbUser.email;\r\n                        user.photoUrl =\r\n                            'https://graph.facebook.com/' +\r\n                                fbUser.id +\r\n                                '/picture?type=normal';\r\n                        user.firstName = fbUser.first_name;\r\n                        user.lastName = fbUser.last_name;\r\n                        user.authToken = authResponse.accessToken;\r\n                        user.response = fbUser;\r\n                        resolve(user);\r\n                    });\r\n                }\r\n                else {\r\n                    reject('User cancelled login or did not fully authorize.');\r\n                }\r\n            }, options);\r\n        });\r\n    }\r\n    signOut() {\r\n        return new Promise((resolve, reject) => {\r\n            FB.logout((response) => {\r\n                resolve();\r\n            });\r\n        });\r\n    }\r\n}\r\nFacebookLoginProvider.PROVIDER_ID = 'FACEBOOK';\n\nclass AmazonLoginProvider extends BaseLoginProvider {\r\n    constructor(clientId, initOptions = {\r\n        scope: 'profile',\r\n        scope_data: {\r\n            profile: { essential: false },\r\n        },\r\n        redirect_uri: location.origin,\r\n    }) {\r\n        super();\r\n        this.clientId = clientId;\r\n        this.initOptions = initOptions;\r\n    }\r\n    initialize() {\r\n        let amazonRoot = null;\r\n        if (document) {\r\n            amazonRoot = document.createElement('div');\r\n            amazonRoot.id = 'amazon-root';\r\n            document.body.appendChild(amazonRoot);\r\n        }\r\n        window.onAmazonLoginReady = () => {\r\n            amazon.Login.setClientId(this.clientId);\r\n        };\r\n        return new Promise((resolve, reject) => {\r\n            try {\r\n                this.loadScript('amazon-login-sdk', 'https://assets.loginwithamazon.com/sdk/na/login1.js', () => {\r\n                    resolve();\r\n                }, amazonRoot);\r\n            }\r\n            catch (err) {\r\n                reject(err);\r\n            }\r\n        });\r\n    }\r\n    getLoginStatus() {\r\n        return new Promise((resolve, reject) => {\r\n            let token = this.retrieveToken();\r\n            if (token) {\r\n                amazon.Login.retrieveProfile(token, (response) => {\r\n                    if (response.success) {\r\n                        let user = new SocialUser();\r\n                        user.id = response.profile.CustomerId;\r\n                        user.name = response.profile.Name;\r\n                        user.email = response.profile.PrimaryEmail;\r\n                        user.response = response.profile;\r\n                        resolve(user);\r\n                    }\r\n                    else {\r\n                        reject(response.error);\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                reject(`No user is currently logged in with ${AmazonLoginProvider.PROVIDER_ID}`);\r\n            }\r\n        });\r\n    }\r\n    signIn(signInOptions) {\r\n        const options = Object.assign(Object.assign({}, this.initOptions), signInOptions);\r\n        return new Promise((resolve, reject) => {\r\n            amazon.Login.authorize(options, (authResponse) => {\r\n                if (authResponse.error) {\r\n                    reject(authResponse.error);\r\n                }\r\n                else {\r\n                    amazon.Login.retrieveProfile(authResponse.access_token, (response) => {\r\n                        let user = new SocialUser();\r\n                        user.id = response.profile.CustomerId;\r\n                        user.name = response.profile.Name;\r\n                        user.email = response.profile.PrimaryEmail;\r\n                        user.authToken = authResponse.access_token;\r\n                        user.response = response.profile;\r\n                        this.persistToken(authResponse.access_token);\r\n                        resolve(user);\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    }\r\n    signOut(revoke) {\r\n        return new Promise((resolve, reject) => {\r\n            try {\r\n                amazon.Login.logout();\r\n                this.clearToken();\r\n                resolve();\r\n            }\r\n            catch (err) {\r\n                reject(err.message);\r\n            }\r\n        });\r\n    }\r\n    persistToken(token) {\r\n        localStorage.setItem(`${AmazonLoginProvider.PROVIDER_ID}_token`, token);\r\n    }\r\n    retrieveToken() {\r\n        return localStorage.getItem(`${AmazonLoginProvider.PROVIDER_ID}_token`);\r\n    }\r\n    clearToken() {\r\n        localStorage.removeItem(`${AmazonLoginProvider.PROVIDER_ID}_token`);\r\n    }\r\n}\r\nAmazonLoginProvider.PROVIDER_ID = 'AMAZON';\n\nclass VKLoginProvider extends BaseLoginProvider {\r\n    constructor(clientId, initOptions = {\r\n        fields: 'photo_max,contacts',\r\n        version: '5.124',\r\n    }) {\r\n        super();\r\n        this.clientId = clientId;\r\n        this.initOptions = initOptions;\r\n        this.VK_API_URL = '//vk.com/js/api/openapi.js';\r\n        this.VK_API_GET_USER = 'users.get';\r\n    }\r\n    initialize() {\r\n        return new Promise((resolve, reject) => {\r\n            try {\r\n                this.loadScript(VKLoginProvider.PROVIDER_ID, this.VK_API_URL, () => {\r\n                    VK.init({\r\n                        apiId: this.clientId,\r\n                    });\r\n                    resolve();\r\n                });\r\n            }\r\n            catch (err) {\r\n                reject(err);\r\n            }\r\n        });\r\n    }\r\n    getLoginStatus() {\r\n        return new Promise((resolve, reject) => this.getLoginStatusInternal(resolve, reject));\r\n    }\r\n    signIn() {\r\n        return new Promise((resolve, reject) => this.signInInternal(resolve, reject));\r\n    }\r\n    signOut() {\r\n        return new Promise((resolve, reject) => {\r\n            VK.Auth.logout((response) => {\r\n                resolve();\r\n            });\r\n        });\r\n    }\r\n    signInInternal(resolve, reject) {\r\n        VK.Auth.login((loginResponse) => {\r\n            if (loginResponse.status === 'connected') {\r\n                this.getUser(loginResponse.session.mid, loginResponse.session.sid, resolve);\r\n            }\r\n        });\r\n    }\r\n    getUser(userId, token, resolve) {\r\n        VK.Api.call(this.VK_API_GET_USER, {\r\n            user_id: userId,\r\n            fields: this.initOptions.fields,\r\n            v: this.initOptions.version,\r\n        }, (userResponse) => {\r\n            resolve(this.createUser(Object.assign({}, { token }, userResponse.response[0])));\r\n        });\r\n    }\r\n    getLoginStatusInternal(resolve, reject) {\r\n        VK.Auth.getLoginStatus((loginResponse) => {\r\n            if (loginResponse.status === 'connected') {\r\n                this.getUser(loginResponse.session.mid, loginResponse.session.sid, resolve);\r\n            }\r\n        });\r\n    }\r\n    createUser(response) {\r\n        const user = new SocialUser();\r\n        user.id = response.id;\r\n        user.name = `${response.first_name} ${response.last_name}`;\r\n        user.photoUrl = response.photo_max;\r\n        user.authToken = response.token;\r\n        return user;\r\n    }\r\n}\r\nVKLoginProvider.PROVIDER_ID = 'VK';\n\n/**\r\n * Protocol modes supported by MSAL.\r\n */\r\nvar ProtocolMode;\r\n(function (ProtocolMode) {\r\n    ProtocolMode[\"AAD\"] = \"AAD\";\r\n    ProtocolMode[\"OIDC\"] = \"OIDC\";\r\n})(ProtocolMode || (ProtocolMode = {}));\r\nconst COMMON_AUTHORITY = 'https://login.microsoftonline.com/common/';\r\n/**\r\n * Microsoft Authentication using MSAL v2: https://github.com/AzureAD/microsoft-authentication-library-for-js/tree/dev/lib/msal-browser\r\n */\r\nclass MicrosoftLoginProvider extends BaseLoginProvider {\r\n    constructor(clientId, initOptions) {\r\n        super();\r\n        this.clientId = clientId;\r\n        this.initOptions = {\r\n            redirect_uri: location.origin,\r\n            authority: COMMON_AUTHORITY,\r\n            scopes: ['openid', 'profile', 'User.Read'],\r\n            knownAuthorities: [],\r\n            protocolMode: ProtocolMode.AAD,\r\n            clientCapabilities: [],\r\n            cacheLocation: 'sessionStorage'\r\n        };\r\n        this.initOptions = Object.assign(Object.assign({}, this.initOptions), initOptions);\r\n    }\r\n    initialize() {\r\n        return new Promise((resolve, reject) => {\r\n            this.loadScript(MicrosoftLoginProvider.PROVIDER_ID, 'https://alcdn.msauth.net/browser/2.1.0/js/msal-browser.js', () => {\r\n                try {\r\n                    const config = {\r\n                        auth: {\r\n                            clientId: this.clientId,\r\n                            redirectUri: this.initOptions.redirect_uri,\r\n                            authority: this.initOptions.authority,\r\n                            knownAuthorities: this.initOptions.knownAuthorities,\r\n                            protocolMode: this.initOptions.protocolMode,\r\n                            clientCapabilities: this.initOptions.clientCapabilities\r\n                        },\r\n                        cache: !this.initOptions.cacheLocation ? null : {\r\n                            cacheLocation: this.initOptions.cacheLocation\r\n                        }\r\n                    };\r\n                    this._instance = new msal.PublicClientApplication(config);\r\n                    resolve();\r\n                }\r\n                catch (e) {\r\n                    reject(e);\r\n                }\r\n            });\r\n        });\r\n    }\r\n    getSocialUser(loginResponse) {\r\n        return new Promise((resolve, reject) => {\r\n            //After login, use Microsoft Graph API to get user info\r\n            let meRequest = new XMLHttpRequest();\r\n            meRequest.onreadystatechange = () => {\r\n                if (meRequest.readyState == 4) {\r\n                    try {\r\n                        if (meRequest.status == 200) {\r\n                            let userInfo = JSON.parse(meRequest.responseText);\r\n                            let user = new SocialUser();\r\n                            user.provider = MicrosoftLoginProvider.PROVIDER_ID;\r\n                            user.id = loginResponse.idToken;\r\n                            user.name = loginResponse.idTokenClaims.name;\r\n                            user.email = loginResponse.account.username;\r\n                            user.idToken = loginResponse.idToken;\r\n                            user.response = loginResponse;\r\n                            user.firstName = userInfo.givenName;\r\n                            user.lastName = userInfo.surname;\r\n                            resolve(user);\r\n                        }\r\n                        else {\r\n                            reject(`Error retrieving user info: ${meRequest.status}`);\r\n                        }\r\n                    }\r\n                    catch (err) {\r\n                        reject(err);\r\n                    }\r\n                }\r\n            };\r\n            //Microsoft Graph ME Endpoint: https://docs.microsoft.com/en-us/graph/api/user-get?view=graph-rest-1.0&tabs=http\r\n            meRequest.open('GET', 'https://graph.microsoft.com/v1.0/me');\r\n            meRequest.setRequestHeader('Authorization', `Bearer ${loginResponse.accessToken}`);\r\n            try {\r\n                meRequest.send();\r\n            }\r\n            catch (err) {\r\n                reject(err);\r\n            }\r\n        });\r\n    }\r\n    getLoginStatus() {\r\n        return new Promise((resolve, reject) => {\r\n            const accounts = this._instance.getAllAccounts();\r\n            if (accounts.length > 0) {\r\n                try {\r\n                    this._instance.ssoSilent({\r\n                        scopes: this.initOptions.scopes,\r\n                        loginHint: accounts[0].username\r\n                    })\r\n                        .then(loginResponse => {\r\n                        this.getSocialUser(loginResponse)\r\n                            .then(user => resolve(user))\r\n                            .catch(err => reject(err));\r\n                    })\r\n                        .catch(err => reject(err));\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }\r\n            else {\r\n                reject(`No user is currently logged in with ${MicrosoftLoginProvider.PROVIDER_ID}`);\r\n            }\r\n        });\r\n    }\r\n    signIn() {\r\n        return new Promise((resolve, reject) => {\r\n            try {\r\n                this._instance.loginPopup({\r\n                    scopes: this.initOptions.scopes\r\n                })\r\n                    .then(loginResponse => {\r\n                    this.getSocialUser(loginResponse)\r\n                        .then(user => resolve(user))\r\n                        .catch(err => reject(err));\r\n                })\r\n                    .catch(err => reject(err));\r\n            }\r\n            catch (err) {\r\n                reject(err);\r\n            }\r\n        });\r\n    }\r\n    signOut(revoke) {\r\n        return new Promise((resolve, reject) => {\r\n            try {\r\n                const accounts = this._instance.getAllAccounts();\r\n                //TODO: This redirects to a Microsoft page, then sends us back to redirect_uri... this doesn't seem to match other providers\r\n                //Open issues:\r\n                // https://github.com/abacritt/angularx-social-login/issues/306\r\n                // https://github.com/AzureAD/microsoft-authentication-library-for-js/issues/2563\r\n                this._instance.logout({\r\n                    account: accounts[0],\r\n                    postLogoutRedirectUri: this.initOptions.redirect_uri\r\n                })\r\n                    .then(() => {\r\n                    resolve();\r\n                })\r\n                    .catch(err => {\r\n                    reject(err);\r\n                });\r\n            }\r\n            catch (err) {\r\n                reject(err);\r\n            }\r\n        });\r\n    }\r\n}\r\nMicrosoftLoginProvider.PROVIDER_ID = 'MICROSOFT';\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { AmazonLoginProvider, BaseLoginProvider, DummyLoginProvider, FacebookLoginProvider, GoogleLoginProvider, MicrosoftLoginProvider, SocialAuthService, SocialLoginModule, SocialUser, VKLoginProvider };\n\n//# sourceMappingURL=angularx-social-login.js.map","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ForgetPasswordService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n  MailDeRecuperation(mail){\r\n    return this.http.get(environment.BACK_END.LOGIN.CONNEXION+\"mail-de-recuperation/\"+mail);\r\n  }\r\n  envoiMailByCode(code){\r\n    return this.http.get(environment.BACK_END.LOGIN.CONNEXION+\"envoi-code/\"+code);\r\n  }\r\n\r\n}\r\n","import { ForgetPasswordComponent } from '../forget-password/forget-password.component';\r\nimport { LoginService } from './../../shared/services/authentification';\r\nimport { InscriptionComponent } from './../inscription/inscription.component';\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { LoginComponent } from './login.component';\r\nimport { SharedModule } from 'src/app/shared/shared.module';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { RouterModule } from '@angular/router';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { SocialLoginModule, SocialAuthServiceConfig } from 'angularx-social-login';\r\nimport {\r\n  GoogleLoginProvider,\r\n  FacebookLoginProvider\r\n} from 'angularx-social-login';\r\nexport const routes = [\r\n  { path: '', component: LoginComponent, pathMatch: 'full' },\r\n  { path: 'inscription', component: InscriptionComponent, pathMatch: 'full' },\r\n  { path: 'forgetpassword', component: ForgetPasswordComponent, pathMatch: 'full' }\r\n];\r\n\r\n@NgModule({\r\n  declarations: [LoginComponent,InscriptionComponent, ForgetPasswordComponent],\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule.forChild(routes),\r\n    FormsModule, \r\n    ReactiveFormsModule,\r\n    SharedModule,\r\n    HttpClientModule,\r\n    SocialLoginModule\r\n  ],\r\n  providers: [\r\n    {\r\n      provide: 'SocialAuthServiceConfig',\r\n      useValue: {\r\n        autoLogin: false,\r\n        providers: [\r\n          {\r\n            id: GoogleLoginProvider.PROVIDER_ID,\r\n            provider: new GoogleLoginProvider('743279905565-e1g2po029tupno9991csqsbb98qrqg8q.apps.googleusercontent.com')\r\n          },\r\n          {\r\n            id: FacebookLoginProvider.PROVIDER_ID,\r\n            provider: new FacebookLoginProvider('708823373162698')\r\n          }\r\n        ]\r\n      } as SocialAuthServiceConfig,\r\n      \r\n    },\r\n    LoginService\r\n  ],\r\n})\r\nexport class LoginModule { }\r\n","import { LoginService } from './../../shared/services/authentification';\r\nimport { Component, ErrorHandler, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { FormGroup, FormBuilder, Validators} from '@angular/forms';\r\nimport { emailValidator } from '../../theme/utils/app-validators';\r\nimport { AppSettings } from '../../app.settings';\r\nimport { Settings } from '../../app.settings.model';\r\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\r\nimport { catchError, map } from 'rxjs/operators';\r\nimport { of } from 'rxjs';\r\nimport { SocialAuthService } from \"angularx-social-login\";\r\nimport { SocialUser } from \"angularx-social-login\";\r\nimport { FacebookLoginProvider, GoogleLoginProvider } from \"angularx-social-login\";\r\nimport { TokenStorageService } from './_helper/localStorage';\r\nimport { SnackBarService } from 'src/app/shared/services/SnackBar';\r\nimport { RolesModel } from 'src/app/shared/models/Securite';\r\nimport { BrowserStack } from 'protractor/built/driverProviders';\r\nimport { ProjetStorageService } from 'src/app/shared/services/ProjetRenovation.localStorage';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  public form:FormGroup;\r\n  public settings: Settings;\r\n  user: SocialUser;\r\n  loggedIn: boolean;\r\n  hide = true;\r\n\r\n  constructor(private authService: SocialAuthService,public appSettings:AppSettings, private projetStorage: ProjetStorageService,\r\n    public fb: FormBuilder, public router:Router, private http: HttpClient,private snackBar: SnackBarService,\r\n     private loginS :LoginService,private token: TokenStorageService){\r\n      if(this.token.getToken() && this.loginS.checkIAmLogin()){\r\n        this.router.navigate([\"/\"]);\r\n      }\r\n    this.settings = this.appSettings.settings; \r\n    this.form = this.fb.group({\r\n      'email': [null, Validators.compose([Validators.required, emailValidator])],\r\n      'password': [null, Validators.compose([Validators.required, Validators.minLength(6)])] \r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.authService.authState.subscribe((user) => {\r\n      this.user = user;\r\n      this.hide=true;\r\n      this.form.get('password').setValue(user.id);\r\n      this.form.get('email').setValue(user.email);\r\n      this.onSubmit();\r\n    });\r\n  }\r\n\r\n  signInWithGoogle(): void {\r\n    this.authService.signIn(GoogleLoginProvider.PROVIDER_ID);\r\n  }\r\n\r\n  signInWithFB(): void {\r\n    this.authService.signIn(FacebookLoginProvider.PROVIDER_ID);\r\n  }\r\n\r\n  signOut(): void {\r\n    this.authService.signOut();\r\n  }\r\n\r\n\r\n  onSubmit(){\r\n    if(this.form.valid){\r\n      const user = {\r\n        username: this.form.get('email').value,\r\n        password: this.form.get('password').value\r\n      }\r\n      this.loginS.login(user).subscribe((data)=>{\r\n        console.log(data);\r\n        const roles: RolesModel[] = data.roles;\r\n        this.token.saveToken(data.accessToken);\r\n        this.token.setMenu(data.id)\r\n        this.token.saveUtilisateur(data.nom+\" \"+data.prenom)\r\n        this.projetStorage.saveGestionTache(0);\r\n        this.projetStorage.saveGestionUser(0);\r\n        this.projetStorage.setGestionAgenda(0);\r\n        this.projetStorage.setGestionDossier(0);\r\n        data.roles.forEach(element => {\r\n          \r\n          if(element == \"ROLE_GESTION_TACHE_RENOVATION\")\r\n          {\r\n            this.projetStorage.saveGestionTache(1);\r\n          }\r\n          else if(element == \"ROLE_GESTION_USER_RENOVATION\")\r\n          {\r\n            this.projetStorage.saveGestionUser(1);\r\n          }\r\n          else if(element == \"ROLE_GESTION_AGENDA_RENOVATION\")\r\n          {\r\n            this.projetStorage.setGestionAgenda(1);\r\n          }\r\n          else if(element ==\"ROLE_GESTION_DOSSIER\")\r\n          {\r\n            this.projetStorage.setGestionDossier(1);\r\n          }\r\n          else if(element==\"ROLE_GESTION_DEMARRAGE_PROJET_RENOVATION\")\r\n          {\r\n            this.projetStorage.saveGestionUser(1);\r\n            this.projetStorage.setGestionAgenda(1);\r\n            this.projetStorage.setGestionDossier(1);\r\n          }\r\n        });\r\n        this.snackBar.openSnackBar(\"Bienvenu \" + data.nom + \" \" + data.prenom, \"Connecter\", 5000);\r\n        this.router.navigate(['/']);\r\n        console.log(data);\r\n      },\r\n      (err: ErrorHandler) => {\r\n        console.log(err);\r\n        this.form.reset();\r\n          this.snackBar.openSnackBar(\"Email ou Password Incorrecte\", \"Connexion\", 3000);\r\n      })\r\n    }\r\n    else{\r\n      this.snackBar.openSnackBar(\"Remplire les Champs SVP\", \"Champs Vide\", 3000);\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///"}